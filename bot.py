import json
import logging
import datetime
import asyncio
import aiohttp   # –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DictionaryAPI
from googletrans import Translator
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackContext, MessageHandler,
    filters, CallbackQueryHandler, ConversationHandler
)

# =============== –ù–ê–°–¢–†–û–ô–ö–ò ===============
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
USERS_FILE = "users.json"
WORDS_FILE = "words.json"

translator = Translator()
logging.basicConfig(level=logging.INFO)

# ================= JSON =================
def load_users():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)

def load_words():
    try:
        with open(WORDS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

def save_words(words):
    with open(WORDS_FILE, "w", encoding="utf-8") as f:
        json.dump(words, f, indent=4, ensure_ascii=False)

# ================= API –¥–ª—è —Å–ª–æ–≤ =================
async def fetch_word(session, word):
    url = f"https://api.dictionaryapi.dev/api/v2/entries/en/{word}"
    async with session.get(url) as resp:
        if resp.status == 200:
            data = await resp.json()
            try:
                meaning = data[0]["meanings"][0]["definitions"][0]["definition"]
                return {
                    "word": word,
                    "translation": translator.translate(word, dest="ru").text,
                    "definition": meaning
                }
            except:
                return None
        return None

async def update_words_file():
    words = load_words()
    if len(words) < 50:  # –µ—Å–ª–∏ —Å–ª–æ–≤ –º–µ–Ω—å—à–µ 50 ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º
        sample_words = [
            "apple", "book", "computer", "school", "water",
            "friend", "language", "beautiful", "music", "travel",
            "work", "future", "happiness", "family", "dream",
            "power", "light", "energy", "nature", "health"
        ]
        new_words = []

        async with aiohttp.ClientSession() as session:
            for w in sample_words:
                word_data = await fetch_word(session, w)
                if word_data:
                    new_words.append(word_data)

        words.extend(new_words)
        save_words(words)

# ================= –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è =================
ASK_LEVEL, ASK_WORDS, ASK_TIME = range(3)

async def start(update: Update, context: CallbackContext):
    users = load_users()
    user_id = str(update.effective_user.id)

    if user_id not in users:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:",
            reply_markup=ReplyKeyboardMarkup(
                [["Beginner", "Intermediate", "Advanced"]],
                one_time_keyboard=True, resize_keyboard=True
            ),
        )
        return ASK_LEVEL
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        return ConversationHandler.END

async def ask_words(update: Update, context: CallbackContext):
    context.user_data["level"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å?")
    return ASK_WORDS

async def ask_time(update: Update, context: CallbackContext):
    try:
        context.user_data["words_per_day"] = int(update.message.text)
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return ASK_WORDS

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã). –ü—Ä–∏–º–µ—Ä: 09:00")
    return ASK_TIME

async def finish_registration(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    users = load_users()

    users[user_id] = {
        "level": context.user_data["level"],
        "words_per_day": context.user_data["words_per_day"],
        "time": update.message.text,
        "premium": False,
        "translations_today": 0,
        "learned_words": []
    }
    save_users(users)

    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    return ConversationHandler.END

# ================= –ú–µ–Ω—é =================
async def menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="set_level")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", callback_data="set_words")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="set_time")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", callback_data="translate_mode")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium")]
    ]
    await update.message.reply_text("–ú–µ–Ω—é ‚öôÔ∏è", reply_markup=InlineKeyboardMarkup(keyboard))

async def menu_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "buy_premium":
        await query.message.reply_text("üíé –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å Premium, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
        await context.bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} —Ö–æ—á–µ—Ç Premium!")
    elif query.data == "translate_mode":
        context.user_data["mode"] = "translate"
        await query.message.reply_text("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤–∫–ª—é—á—ë–Ω. –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ üìñ")

# ================= –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ =================
async def handle_message(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    users = load_users()

    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    user = users[user_id]

    if context.user_data.get("mode") == "translate":
        limit = 20 if user["premium"] else 5
        if user["translations_today"] >= limit:
            await update.message.reply_text("‚ùå –õ–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
            return

        word = update.message.text
        translation = translator.translate(word, dest="ru").text
        definition = translator.translate(word, src="en", dest="en").text

        user["translations_today"] += 1
        save_users(users)

        await update.message.reply_text(
            f"üî§ {word}\n–ü–µ—Ä–µ–≤–æ–¥: {translation}\n–û–ø–∏—Å–∞–Ω–∏–µ: {definition}"
        )

# ================= –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤ =================
async def send_daily_words(app: Application):
    while True:
        await update_words_file()
        users = load_users()
        words = load_words()
        now = datetime.datetime.now().strftime("%H:%M")

        for user_id, data in users.items():
            if data["time"] == now:
                count = data["words_per_day"]
                learned = set(data["learned_words"])
                new_words = [w for w in words if w["word"] not in learned][:count]

                if new_words:
                    text = "üìö –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–ª–æ–≤–∞:\n"
                    for w in new_words:
                        text += f"\nüî§ {w['word']} - {w['translation']}\nüìñ {w['definition']}\n"
                        data["learned_words"].append(w["word"])

                    await app.bot.send_message(user_id, text)

        save_users(users)
        await asyncio.sleep(60)

# ================= –û—Å–Ω–æ–≤–Ω–æ–µ =================
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_words)],
            ASK_WORDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_registration)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(menu_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.job_queue.run_once(lambda ctx: asyncio.create_task(send_daily_words(app)), 1)

    app.run_polling()

if __name__ == "__main__":
    main()